// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	Command
	Reply
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommandId int32

const (
	CommandId_PING   CommandId = 0
	CommandId_SET    CommandId = 1
	CommandId_GET    CommandId = 2
	CommandId_DEL    CommandId = 3
	CommandId_CGET   CommandId = 4
	CommandId_CADD   CommandId = 5
	CommandId_EXPIRE CommandId = 6
	CommandId_TTL    CommandId = 7
)

var CommandId_name = map[int32]string{
	0: "PING",
	1: "SET",
	2: "GET",
	3: "DEL",
	4: "CGET",
	5: "CADD",
	6: "EXPIRE",
	7: "TTL",
}
var CommandId_value = map[string]int32{
	"PING":   0,
	"SET":    1,
	"GET":    2,
	"DEL":    3,
	"CGET":   4,
	"CADD":   5,
	"EXPIRE": 6,
	"TTL":    7,
}

func (x CommandId) Enum() *CommandId {
	p := new(CommandId)
	*p = x
	return p
}
func (x CommandId) String() string {
	return proto.EnumName(CommandId_name, int32(x))
}
func (x *CommandId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommandId_value, data, "CommandId")
	if err != nil {
		return err
	}
	*x = CommandId(value)
	return nil
}
func (CommandId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Command struct {
	CommandId        *CommandId `protobuf:"varint,1,req,name=commandId,enum=protocol.CommandId" json:"commandId,omitempty"`
	Args             []string   `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetCommandId() CommandId {
	if m != nil && m.CommandId != nil {
		return *m.CommandId
	}
	return CommandId_PING
}

func (m *Command) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type Reply struct {
	Values           []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	Error            *string  `protobuf:"bytes,2,req,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reply) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Reply) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Command)(nil), "protocol.Command")
	proto.RegisterType((*Reply)(nil), "protocol.Reply")
	proto.RegisterEnum("protocol.CommandId", CommandId_name, CommandId_value)
}

var fileDescriptor0 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x8c, 0x3d, 0x6b, 0x85, 0x30,
	0x14, 0x40, 0x6b, 0xfc, 0xcc, 0xa5, 0x95, 0x90, 0x2e, 0x8e, 0xe2, 0x20, 0xd2, 0xc1, 0xa1, 0x7f,
	0xa0, 0x14, 0x0d, 0x22, 0x48, 0x11, 0xeb, 0xd0, 0x8e, 0x41, 0x83, 0x8b, 0x36, 0x92, 0xb4, 0x85,
	0xf7, 0xef, 0x5f, 0xe2, 0x43, 0xde, 0x74, 0x0f, 0xf7, 0x9c, 0x7b, 0x21, 0xde, 0x84, 0xd6, 0x7c,
	0x11, 0xba, 0xdc, 0x95, 0xfc, 0x95, 0x34, 0x3a, 0xc6, 0x24, 0xd7, 0xec, 0x0d, 0xc2, 0x4a, 0x6e,
	0x1b, 0xff, 0x99, 0x69, 0x0e, 0x78, 0xba, 0x61, 0x3b, 0x27, 0x4e, 0x8a, 0x8a, 0xf8, 0xf5, 0xb9,
	0x3c, 0xc3, 0xb2, 0x3a, 0x15, 0x7d, 0x04, 0x8f, 0xab, 0x45, 0x27, 0x28, 0x75, 0x0b, 0x9c, 0xe5,
	0xe0, 0x0f, 0x62, 0x5f, 0x2f, 0x34, 0x86, 0xe0, 0x9f, 0xaf, 0x7f, 0x42, 0x9b, 0x5b, 0x23, 0xe8,
	0x13, 0xf8, 0x42, 0x29, 0xa9, 0x4c, 0x87, 0x0a, 0xfc, 0xf2, 0x0d, 0xf8, 0xfe, 0x22, 0x02, 0xaf,
	0x6f, 0x3f, 0x1a, 0xf2, 0x40, 0x43, 0x70, 0x3f, 0xd9, 0x48, 0x1c, 0x0b, 0x8d, 0x01, 0x64, 0xa1,
	0x66, 0x1d, 0x71, 0x6d, 0x54, 0xd9, 0x95, 0x77, 0xd0, 0x7b, 0x5d, 0x13, 0x9f, 0x02, 0x04, 0xec,
	0xab, 0x6f, 0x07, 0x46, 0x02, 0x1b, 0x8e, 0x63, 0x47, 0xc2, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x9a, 0x97, 0x9a, 0x9e, 0xde, 0x00, 0x00, 0x00,
}
